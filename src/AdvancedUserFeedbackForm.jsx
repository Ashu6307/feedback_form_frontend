import React, { useState, useEffect, useCallback } from 'react';
import {
  filterNameInput,
  getNormalizedMobile,
  getMobileValidationError,
  getEmailValidationError,
  validateName,
  validateFormField
} from './utils/validations.js';

// Advanced User Feedback Form - Complete redesign
const AdvancedUserFeedbackForm = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [lang, setLang] = useState('hinglish');
  
  // Option mapping system - each option has a unique ID
  const optionMappings = {
    currentSituation: {
      'LOOKING_ACTIVE': { 
        english: 'Looking for PG actively',
        hindi: 'рд╕рдХреНрд░рд┐рдп рд░реВрдк рд╕реЗ рдкреАрдЬреА рдХреА рддрд▓рд╛рд╢ рдореЗрдВ',
        hinglish: 'Actively PG dhundh rahe hain'
      },
      'LOOKING_CASUAL': {
        english: 'Looking for PG but not urgently',
        hindi: 'рдкреАрдЬреА рдХреА рддрд▓рд╛рд╢ рд╣реИ рд▓реЗрдХрд┐рди рдЬрд▓реНрджреА рдирд╣реАрдВ',
        hinglish: 'PG dhundh rahe hain lekin urgent nahi'
      },
      'NEED_SWITCH': {
        english: 'Need to switch current PG',
        hindi: 'рд╡рд░реНрддрдорд╛рди рдкреАрдЬреА рдмрджрд▓рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ',
        hinglish: 'Current PG change karna hai'
      },
      'HAPPY_CURRENT': {
        english: 'Happy with current PG',
        hindi: 'рд╡рд░реНрддрдорд╛рди рдкреАрдЬреА рд╕реЗ рдЦреБрд╢ рд╣реИрдВ',
        hinglish: 'Current PG se khush hain'
      },
      'OTHER': {
        english: 'Other',
        hindi: 'рдЕрдиреНрдп',
        hinglish: 'Other'
      }
    },
    painPoints: {
      'HIGH_RENT': {
        english: 'High rent prices',
        hindi: 'рдЕрдзрд┐рдХ рдХрд┐рд░рд╛рдпрд╛',
        hinglish: 'Zyada rent'
      },
      'POOR_FACILITIES': {
        english: 'Poor facilities',
        hindi: 'рдЦрд░рд╛рдм рд╕реБрд╡рд┐рдзрд╛рдПрдВ',
        hinglish: 'Kharab facilities'
      },
      'BAD_FOOD': {
        english: 'Bad food quality',
        hindi: 'рдЦрд░рд╛рдм рдЦрд╛рдирд╛',
        hinglish: 'Kharab khana'
      },
      'SAFETY_CONCERNS': {
        english: 'Safety concerns',
        hindi: 'рд╕реБрд░рдХреНрд╖рд╛ рдХреА рдЪрд┐рдВрддрд╛',
        hinglish: 'Safety ki problem'
      },
      'LIMITED_OPTIONS': {
        english: 'Limited options available',
        hindi: 'рд╕реАрдорд┐рдд рд╡рд┐рдХрд▓реНрдк',
        hinglish: 'Limited options'
      },
      'LOCATION_ISSUES': {
        english: 'Location problems',
        hindi: 'рд╕реНрдерд╛рди рдХреА рд╕рдорд╕реНрдпрд╛',
        hinglish: 'Location ki problem'
      },
      'OTHER': {
        english: 'Other',
        hindi: 'рдЕрдиреНрдп',
        hinglish: 'Other'
      }
    },
    features: {
      'MEAL_PLANS': {
        english: 'Flexible meal plans',
        hindi: 'рд▓рдЪреАрд▓реА рднреЛрдЬрди рдпреЛрдЬрдирд╛',
        hinglish: 'Flexible meal plans'
      },
      'HOUSEKEEPING': {
        english: 'Daily housekeeping',
        hindi: 'рджреИрдирд┐рдХ рд╕рдлрд╛рдИ',
        hinglish: 'Daily safai'
      },
      'LAUNDRY': {
        english: 'Laundry service',
        hindi: 'рдХрдкрдбрд╝реЗ рдзреЛрдиреЗ рдХреА рд╕реЗрд╡рд╛',
        hinglish: 'Laundry service'
      },
      'WIFI': {
        english: 'High-speed WiFi',
        hindi: 'рддреЗрдЬрд╝ рдЗрдВрдЯрд░рдиреЗрдЯ',
        hinglish: 'Fast internet'
      },
      'SECURITY': {
        english: '24/7 Security',
        hindi: '24/7 рд╕реБрд░рдХреНрд╖рд╛',
        hinglish: '24/7 security'
      },
      'AC_ROOMS': {
        english: 'AC rooms',
        hindi: 'рдПрд╕реА рдХрдорд░реЗ',
        hinglish: 'AC rooms'
      },
      'PARKING': {
        english: 'Parking facility',
        hindi: 'рдкрд╛рд░реНрдХрд┐рдВрдЧ рд╕реБрд╡рд┐рдзрд╛',
        hinglish: 'Parking facility'
      },
      'COMMON_AREAS': {
        english: 'Common areas',
        hindi: 'рд╕рд╛рдорд╛рдиреНрдп рдХреНрд╖реЗрддреНрд░',
        hinglish: 'Common areas'
      },
      'OTHER': {
        english: 'Other',
        hindi: 'рдЕрдиреНрдп',
        hinglish: 'Other'
      }
    }
  };

  // Form state stores option IDs instead of text values
  const [form, setForm] = useState({
    // Profile
    name: '',
    email: '',
    phone: '',
    city: '',
    otherCity: '',
    occupation: '',
    budget: '',
    
    // Current Situation - store ID
    currentSituation: '',
    otherCurrentSituation: '',
    
    // Pain Points - store IDs in array
    mainProblems: [],
    otherMainProblem: '',
    
    // Platform Features - store IDs in array
    importantFeatures: [],
    otherFeature: '',
    
    // Success Metrics
    willingToPay: '',
    recommendation: 5,
    urgency: '',
    
    // Analytics
    formStartTime: Date.now()
  });

  const [errors, setErrors] = useState({});
  
  // Enhanced UX States
  const [loading, setLoading] = useState(false);
  const [submitStatus, setSubmitStatus] = useState(''); // 'success', 'error', ''
  const [stepLoading, setStepLoading] = useState(false);
  const [notification, setNotification] = useState({ show: false, type: '', message: '' });
  const [alreadySubmitted, setAlreadySubmitted] = useState(false);
  const [submissionInfo, setSubmissionInfo] = useState(null);

  // Language configurations
  const languages = {
    english: {
      title: 'ЁЯСд Platform Feedback - PG/Room Seeker',
      subtitle: 'Help us create the perfect room hunting experience for you',
      steps: ['ЁЯСд Profile', 'ЁЯПа Current', 'тЪб Problems', 'ЁЯТО Features', 'ЁЯУК Success'],
      
      // Step 1: Profile
      profile: {
        title: 'Quick Profile Setup',
        subtitle: 'Tell us about yourself (30 seconds)',
        name: 'Full Name *',
        email: 'Email Address *',
        phone: 'Phone Number *',
        city: 'Current City *',
        occupation: 'Occupation *',
        occupationOptions: [
          'Select your occupation',
          'ЁЯОУ Student',
          'ЁЯТ╝ Working Professional',
          'ЁЯФз Other'
        ],
        budget: 'Monthly Budget Range *',
        budgetOptions: [
          'Select budget range',
          'тВ╣5,000-10,000',
          'тВ╣10,000-15,000',
        ]
      },
      
      // Step 2: Current Situation
      currentSituation: {
        title: 'What\'s Your Current Housing Situation?',
        subtitle: 'Help us understand your needs better',
        options: [
          'ЁЯПа Living with family, looking to move out',
          'ЁЯПв Currently in PG, want to switch',
          'ЁЯПа In shared flat/room, want to change',
          'ЁЯОТ New to city, need accommodation',
          'ЁЯФД Relocating for job/studies',
          'тП░ Current place lease ending soon',
          'ЁЯУЭ Other'
        ]
      },
      
      // Step 3: Pain Points
      painPoints: {
        title: 'What Are Your BIGGEST Problems While Searching?',
        subtitle: 'Select all that frustrate you the most',
        options: [
          'ЁЯФН Can\'t find verified/genuine listings',
          'ЁЯТ░ Hidden charges and broker fees',
          'тП░ Wasting time visiting fake properties',
          'ЁЯУЮ Dealing with unresponsive owners',
          'ЁЯПа Properties don\'t match online descriptions',
          'ЁЯУЛ Complicated documentation process',
          'ЁЯТ╕ Advance payment without guarantees',
          'ЁЯЪл Limited options in preferred areas',
          'ЁЯУЭ Other problem'
        ]
      },
      
      // Step 4: Platform Features
      features: {
        title: 'Most Important Features for Your Search',
        subtitle: 'Select minimum 4, maximum 8 must-have features',
        options: [
          'тЬЕ Verified property photos & details',
          'ЁЯФН Advanced filters (budget, location, amenities)',
          'ЁЯУ▒ Virtual tours/video calls with owners',
          'ЁЯТ│ Secure online booking & payments',
          'тнР Genuine reviews from previous tenants',
          'ЁЯУН Exact location & nearby facilities info',
          'ЁЯдЭ Direct communication with owners',
          'ЁЯУЛ Zero brokerage guarantees',
          'тЪб Instant booking confirmation',
          'ЁЯЫбя╕П Deposit protection & refund guarantees',
          'ЁЯУЭ Other'
        ]
      },
      
      // Step 5: Success
      success: {
        title: 'Platform Usage & Success',
        subtitle: 'Help us build the right service model',
        willingToPay: 'Would you pay for premium features? *',
        paymentOptions: [
          'ЁЯТО Yes - тВ╣99/month for premium search',
          'ЁЯОп Yes - тВ╣299 one-time for booking guarantee',
          'ЁЯЖУ Only if basic search is completely free',
          'тЭМ Would never pay for room search'
        ],
        recommendation: 'How likely to recommend our platform? (1-10)',
        urgency: 'How urgently do you need accommodation? *',
        urgencyOptions: [
          'ЁЯЪи Immediately (within 1 week)',
          'тП░ Soon (within 1 month)',
          'ЁЯУЕ Planning ahead (2-3 months)',
          'ЁЯСА Just exploring options'
        ]
      },
      
      navigation: {
        next: 'Next Step тЖТ',
        prev: 'тЖР Previous', 
        submit: 'ЁЯЪА Submit Feedback'
      }
    },
    
    hindi: {
      title: 'ЁЯСд рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдлреАрдбрдмреИрдХ - рдкреАрдЬреА/рд░реВрдо рдЦреЛрдЬрдиреЗ рд╡рд╛рд▓реЗ',
      subtitle: 'рдЖрдкрдХреЗ рд▓рд┐рдП рдкрд░рдлреЗрдХреНрдЯ рд░реВрдо рд╣рдВрдЯрд┐рдВрдЧ рдПрдХреНрд╕рдкреАрд░рд┐рдпрдВрд╕ рдмрдирд╛рдиреЗ рдореЗрдВ рд╣рдорд╛рд░реА рдорджрдж рдХрд░реЗрдВ',
      steps: ['ЁЯСд рдкреНрд░реЛрдлрд╛рдЗрд▓', 'ЁЯПа рд╡рд░реНрддрдорд╛рди', 'тЪб рд╕рдорд╕реНрдпрд╛рдПрдВ', 'ЁЯТО рдлреАрдЪрд░реНрд╕', 'ЁЯУК рд╕рдлрд▓рддрд╛'],
      
      profile: {
        title: 'рддреНрд╡рд░рд┐рдд рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕реЗрдЯрдЕрдк',
        subtitle: 'рдЕрдкрдиреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ (30 рд╕реЗрдХрдВрдб)',
        name: 'рдкреВрд░рд╛ рдирд╛рдо *',
        email: 'рдИрдореЗрд▓ рдПрдбреНрд░реЗрд╕ *',
        phone: 'рдлреЛрди рдирдВрдмрд░ *',
        city: 'рд╡рд░реНрддрдорд╛рди рд╢рд╣рд░ *',
        occupation: 'рдкреЗрд╢рд╛ *',
        occupationOptions: [
          'рдЕрдкрдирд╛ рдкреЗрд╢рд╛ рдЪреБрдиреЗрдВ',
          'ЁЯОУ рдЫрд╛рддреНрд░',
          'ЁЯТ╝ рдиреМрдХрд░реАрдкреЗрд╢рд╛',
          'ЁЯФз рдЕрдиреНрдп'
        ],
        budget: 'рдорд╛рд╕рд┐рдХ рдмрдЬрдЯ рд░реЗрдВрдЬ *',
        budgetOptions: [
          'рдмрдЬрдЯ рд░реЗрдВрдЬ рдЪреБрдиреЗрдВ',
          'тВ╣5,000-10,000',
          'тВ╣10,000-15,000',
        ]
      },
      
      currentSituation: {
        title: 'рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рд╣рд╛рдЙрд╕рд┐рдВрдЧ рд╕реНрдерд┐рддрд┐ рдХреНрдпрд╛ рд╣реИ?',
        subtitle: 'рдЖрдкрдХреА рдЬрд░реВрд░рддреЛрдВ рдХреЛ рдмреЗрд╣рддрд░ рд╕рдордЭрдиреЗ рдореЗрдВ рдорджрдж рдХрд░реЗрдВ',
        options: [
          'ЁЯПа рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рд╕рд╛рде рд░рд╣ рд░рд╣реЗ рд╣реИрдВ, рдмрд╛рд╣рд░ рдЬрд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ',
          'ЁЯПв рдЕрднреА рдкреАрдЬреА рдореЗрдВ рд╣реИрдВ, рдмрджрд▓рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ',
          'ЁЯПа рд╢реЗрдпрд░реНрдб рдлреНрд▓реИрдЯ/рд░реВрдо рдореЗрдВ рд╣реИрдВ, рдмрджрд▓рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ',
          'ЁЯОТ рд╢рд╣рд░ рдореЗрдВ рдирдП рд╣реИрдВ, рд░рд╣рдиреЗ рдХреА рдЬрдЧрд╣ рдЪрд╛рд╣рд┐рдП',
          'ЁЯФД рдиреМрдХрд░реА/рдкрдврд╝рд╛рдИ рдХреЗ рд▓рд┐рдП рд░рд┐рд▓реЛрдХреЗрдЯ рдХрд░ рд░рд╣реЗ рд╣реИрдВ',
          'тП░ рдореМрдЬреВрджрд╛ рдЬрдЧрд╣ рдХрд╛ рд▓реАрдЬ рдЬрд▓реНрджреА рдЦрддреНрдо рд╣реЛ рд░рд╣рд╛ рд╣реИ',
          'ЁЯУЭ рдЕрдиреНрдп'
        ]
      },
      
      painPoints: {
        title: 'рдЦреЛрдЬрддреЗ рд╕рдордп рдЖрдкрдХреА рд╕рдмрд╕реЗ рдмрдбрд╝реА рд╕рдорд╕реНрдпрд╛рдПрдВ рдХреНрдпрд╛ рд╣реИрдВ?',
        subtitle: 'рдЬреЛ рднреА рдЖрдкрдХреЛ рд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ рдкрд░реЗрд╢рд╛рди рдХрд░рддрд╛ рд╣реИ рд╡реЛ рд╕рдм рдЪреБрдиреЗрдВ',
        options: [
          'ЁЯФН рд╡реЗрд░рд┐рдлрд╛рдЗрдб/рдЕрд╕рд▓реА рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рдирд╣реАрдВ рдорд┐рд▓рддреА',
          'ЁЯТ░ рдЫреБрдкреЗ рд╣реБрдП рдЪрд╛рд░реНрдЬреЗрд╕ рдФрд░ рдмреНрд░реЛрдХрд░ рдлреАрд╕',
          'тП░ рдлрд░реНрдЬреА рдкреНрд░реЙрдкрд░реНрдЯреАрдЬ рджреЗрдЦрдиреЗ рдореЗрдВ рд╕рдордп рдмрд░реНрдмрд╛рдж',
          'ЁЯУЮ рдУрдирд░реНрд╕ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдирд╣реАрдВ рдХрд░рддреЗ',
          'ЁЯПа рдкреНрд░реЙрдкрд░реНрдЯреА рдСрдирд▓рд╛рдЗрди рдбрд┐рд╕реНрдХреНрд░рд┐рдкреНрд╢рди рд╕реЗ рдореИрдЪ рдирд╣реАрдВ рдХрд░рддреА',
          'ЁЯУЛ рдХреЙрдореНрдкреНрд▓рд┐рдХреЗрдЯреЗрдб рдбреЙрдХреНрдпреВрдореЗрдВрдЯреЗрд╢рди рдкреНрд░реЛрд╕реЗрд╕',
          'ЁЯТ╕ рдЧрд╛рд░рдВрдЯреА рдХреЗ рдмрд┐рдирд╛ рдПрдбрд╡рд╛рдВрд╕ рдкреЗрдореЗрдВрдЯ',
          'ЁЯЪл рдкрд╕рдВрджреАрджрд╛ рдПрд░рд┐рдпрд╛ рдореЗрдВ рд╕реАрдорд┐рдд рдСрдкреНрд╢рди',
          'ЁЯУЭ рдЕрдиреНрдп рд╕рдорд╕реНрдпрд╛'
        ]
      },
      
      features: {
        title: 'рдЖрдкрдХреА рдЦреЛрдЬ рдХреЗ рд▓рд┐рдП рд╕рдмрд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдлреАрдЪрд░реНрд╕',
        subtitle: 'рдХрдо рд╕реЗ рдХрдо 4, рдЕрдзрд┐рдХрддрдо 8 рдЬрд░реВрд░реА рдлреАрдЪрд░реНрд╕ рдЪреБрдиреЗрдВ',
        options: [
          'тЬЕ рд╡реЗрд░рд┐рдлрд╛рдЗрдб рдкреНрд░реЙрдкрд░реНрдЯреА рдлреЛрдЯреЛрдЬ рдФрд░ рдбрд┐рдЯреЗрд▓реНрд╕',
          'ЁЯФН рдПрдбрд╡рд╛рдВрд╕реНрдб рдлрд┐рд▓реНрдЯрд░реНрд╕ (рдмрдЬрдЯ, рд▓реЛрдХреЗрд╢рди, рдЕрдореЗрдирд┐рдЯреАрдЬ)',
          'ЁЯУ▒ рд╡рд░реНрдЪреБрдЕрд▓ рдЯреВрд░реНрд╕/рдУрдирд░реНрд╕ рдХреЗ рд╕рд╛рде рд╡реАрдбрд┐рдпреЛ рдХреЙрд▓',
          'ЁЯТ│ рд╕рд┐рдХреНрдпреЛрд░ рдСрдирд▓рд╛рдЗрди рдмреБрдХрд┐рдВрдЧ рдФрд░ рдкреЗрдореЗрдВрдЯреНрд╕',
          'тнР рдкрд┐рдЫрд▓реЗ рдЯреЗрдиреЗрдВрдЯреНрд╕ рдХреЗ рд╕рдЪреНрдЪреЗ рд░рд┐рд╡реНрдпреВрдЬ',
          'ЁЯУН рдПрдХреНрдЬреИрдХреНрдЯ рд▓реЛрдХреЗрд╢рди рдФрд░ рдирдЬрджреАрдХреА рд╕реБрд╡рд┐рдзрд╛рдУрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА',
          'ЁЯдЭ рдУрдирд░реНрд╕ рдХреЗ рд╕рд╛рде рдбрд╛рдпрд░реЗрдХреНрдЯ рдХрдореНрдпреБрдирд┐рдХреЗрд╢рди',
          'ЁЯУЛ рдЬреАрд░реЛ рдмреНрд░реЛрдХрд░реЗрдЬ рдЧрд╛рд░рдВрдЯреА',
          'тЪб рдЗрдВрд╕реНрдЯреЗрдВрдЯ рдмреБрдХрд┐рдВрдЧ рдХрдиреНрдлрд░реНрдореЗрд╢рди',
          'ЁЯЫбя╕П рдбрд┐рдкреЙрдЬрд╝рд┐рдЯ рдкреНрд░реЛрдЯреЗрдХреНрд╢рди рдФрд░ рд░рд┐рдлрдВрдб рдЧрд╛рд░рдВрдЯреА',
          'ЁЯУЭ рдЕрдиреНрдп'
        ]
      },
      
      success: {
        title: 'рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдпреВрд╕реЗрдЬ рдФрд░ рд╕рдлрд▓рддрд╛',
        subtitle: 'рд╕рд╣реА рд╕рд░реНрд╡рд┐рд╕ рдореЙрдбрд▓ рдмрдирд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░реЗрдВ',
        willingToPay: 'рдХреНрдпрд╛ рдЖрдк рдкреНрд░реАрдорд┐рдпрдо рдлреАрдЪрд░реНрд╕ рдХреЗ рд▓рд┐рдП рдкреЗ рдХрд░реЗрдВрдЧреЗ? *',
        paymentOptions: [
          'ЁЯТО рд╣рд╛рдВ - тВ╣99/рдорд╣реАрдирд╛ рдкреНрд░реАрдорд┐рдпрдо рд╕рд░реНрдЪ рдХреЗ рд▓рд┐рдП',
          'ЁЯОп рд╣рд╛рдВ - тВ╣299 рд╡рди-TIME рдмреБрдХрд┐рдВрдЧ рдЧрд╛рд░рдВрдЯреА рдХреЗ рд▓рд┐рдП',
          'ЁЯЖУ рдХреЗрд╡рд▓ рдЕрдЧрд░ рдмреЗрд╕рд┐рдХ рд╕рд░реНрдЪ рдмрд┐рд▓реНрдХреБрд▓ рдлреНрд░реА рд╣реЛ',
          'тЭМ рд░реВрдо рд╕рд░реНрдЪ рдХреЗ рд▓рд┐рдП рдХрднреА рдкреЗ рдирд╣реАрдВ рдХрд░реВрдВрдЧрд╛'
        ],
        recommendation: 'рд╣рдорд╛рд░реЗ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдХреЛ рд░рд┐рдХрдореЗрдВрдб рдХрд░рдиреЗ рдХреА рд╕рдВрднрд╛рд╡рдирд╛? (1-10)',
        urgency: 'рдЖрдкрдХреЛ рдХрд┐рддрдиреА рдЬрд▓реНрджреА рдПрдХреЛрдореЛрдбреЗрд╢рди рдЪрд╛рд╣рд┐рдП? *',
        urgencyOptions: [
          'ЁЯЪи рддреБрд░рдВрдд (1 рд╣рдлреНрддреЗ рдореЗрдВ)',
          'тП░ рдЬрд▓реНрджреА (1 рдорд╣реАрдиреЗ рдореЗрдВ)',
          'ЁЯУЕ рдкреНрд▓рд╛рдирд┐рдВрдЧ рдХрд░ рд░рд╣реЗ рд╣реИрдВ (2-3 рдорд╣реАрдиреЗ)',
          'ЁЯСА рд╕рд┐рд░реНрдл рдСрдкреНрд╢рдиреНрд╕ рджреЗрдЦ рд░рд╣реЗ рд╣реИрдВ'
        ]
      },
      
      navigation: {
        next: 'рдЕрдЧрд▓рд╛ рд╕реНрдЯреЗрдк тЖТ',
        prev: 'тЖР рдкрд┐рдЫрд▓рд╛',
        submit: 'ЁЯЪА рдлреАрдбрдмреИрдХ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ'
      }
    },
    
    hinglish: {
      title: 'ЁЯСд Platform Feedback - PG/Room Seeker',
      subtitle: 'Perfect room hunting experience banane me hamare saath help kijiye',
      steps: ['ЁЯСд Profile', 'ЁЯПа Current', 'тЪб Problems', 'ЁЯТО Features', 'ЁЯУК Success'],
      
      profile: {
        title: 'Quick Profile Setup',
        subtitle: 'Apne bare me batayiye (30 seconds)',
        name: 'Pura Naam *',
        email: 'Email Address *',
        phone: 'Phone Number *',
        city: 'Current City *',
        occupation: 'Occupation *',
        occupationOptions: [
          'Apna occupation select kare',
          'ЁЯОУ Student',
          'ЁЯТ╝ Working Professional',
          'ЁЯФз Other'
        ],
        budget: 'Monthly Budget Range *',
        budgetOptions: [
          'Budget range select kare',
          'тВ╣5,000-10,000',
          'тВ╣10,000-15,000',
        ]
      },
      
      currentSituation: {
        title: 'Aapki Current Housing Situation Kya Hai?',
        subtitle: 'Aapki needs better samajhne me help kare',
        options: [
          'ЁЯПа Family ke saath reh rahe hain, bahar jana chahte hain',
          'ЁЯПв Abhi PG me hain, switch karna chahte hain',
          'ЁЯПа Shared flat/room me hain, change karna chahte hain',
          'ЁЯОТ City me naye hain, accommodation chahiye',
          'ЁЯФД Job/studies ke liye relocate kar rahe hain',
          'тП░ Current place ka lease jaldi khatam ho raha hai',
          'ЁЯУЭ Other'
        ]
      },
      
      painPoints: {
        title: 'Searching Karte Time Aapki Biggest Problems Kya Hain?',
        subtitle: 'Jo bhi aapko sabse zyada frustrate karta hai wo sab select kare',
        options: [
          'ЁЯФН Verified/genuine listings nahi milti',
          'ЁЯТ░ Hidden charges aur broker fees',
          'тП░ Fake properties dekhne me time waste',
          'ЁЯУЮ Owners respond nahi karte',
          'ЁЯПа Properties online description se match nahi karti',
          'ЁЯУЛ Complicated documentation process',
          'ЁЯТ╕ Guarantees ke bina advance payment',
          'ЁЯЪл Preferred areas me limited options',
          'ЁЯУЭ Koi aur problem'
        ]
      },
      
      features: {
        title: 'Aapki Search Ke Liye Sabse Important Features',
        subtitle: 'Minimum 4, maximum 8 must-have features select kare',
        options: [
          'тЬЕ Verified property photos aur details',
          'ЁЯФН Advanced filters (budget, location, amenities)',
          'ЁЯУ▒ Virtual tours/owners ke saath video calls',
          'ЁЯТ│ Secure online booking aur payments',
          'тнР Previous tenants ke genuine reviews',
          'ЁЯУН Exact location aur nearby facilities info',
          'ЁЯдЭ Owners ke saath direct communication',
          'ЁЯУЛ Zero brokerage guarantees',
          'тЪб Instant booking confirmation',
          'ЁЯЫбя╕П Deposit protection aur refund guarantees',
          'ЁЯУЭ Other'
        ]
      },
      
      success: {
        title: 'Platform Usage Aur Success',
        subtitle: 'Right service model banane me help kare',
        willingToPay: 'Kya aap premium features ke liye pay karenge? *',
        paymentOptions: [
          'ЁЯТО Haan - тВ╣99/month premium search ke liye',
          'ЁЯОп Haan - тВ╣299 one-time booking guarantee ke liye',
          'ЁЯЖУ Sirf agar basic search bilkul free ho',
          'тЭМ Room search ke liye kabhi pay nahi karunga'
        ],
        recommendation: 'Hamare platform ko recommend karne ki possibility? (1-10)',
        urgency: 'Kitni urgently accommodation chahiye? *',
        urgencyOptions: [
          'ЁЯЪи Turant (1 week me)',
          'тП░ Jaldi (1 month me)',
          'ЁЯУЕ Planning kar rahe hain (2-3 months)',
          'ЁЯСА Sirf options dekh rahe hain'
        ]
      },
      
      navigation: {
        next: 'Next Step тЖТ',
        prev: 'тЖР Previous',
        submit: 'ЁЯЪА Feedback Submit Kare'
      }
    }
  };

  const currentLang = languages[lang];

  // Helper functions for option mapping system
  const getOptionText = (optionId, category) => {
    if (!optionId || !optionMappings[category] || !optionMappings[category][optionId]) {
      return optionId; // Return as-is if not found
    }
    return optionMappings[category][optionId][lang] || optionId;
  };

  const getOptionsList = (category) => {
    if (!optionMappings[category]) return [];
    return Object.keys(optionMappings[category]).map(id => ({
      id,
      text: optionMappings[category][id][lang]
    }));
  };

  // Language change handler with option conversion
  const handleLanguageChange = (newLanguage) => {
    console.log('Language changing from', lang, 'to', newLanguage);
    console.log('Current form state:', form);
    
    // With ID-based system, no conversion needed!
    // Form state already contains IDs, just change display language
    setLang(newLanguage);
    
    console.log('Language changed to', newLanguage, 'form state unchanged:', form);
  };

  // Device Submission Tracking Functions

  const markAsSubmitted = useCallback((formData) => {
    try {
      const submissionRecord = {
        submitted: true,
        timestamp: new Date().toISOString(),
        type: 'user',
        name: formData.name,
        email: formData.email,
        deviceInfo: {
          userAgent: navigator.userAgent,
          screen: `${window.screen.width}x${window.screen.height}`,
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          language: navigator.language
        }
      };
      
      localStorage.setItem('userFeedbackSubmitted', JSON.stringify(submissionRecord));
      localStorage.removeItem('userFeedbackForm');
      localStorage.removeItem('userFeedbackStep');
      localStorage.removeItem('userFeedbackLastSaved');
    } catch (error) {
      console.error('Error marking submission:', error);
    }
  }, []);

  // Form validation
  const validateStep = (step) => {
    const newErrors = {};
    
    switch(step) {
      case 1:
        // Name validation
        const nameValidation = validateFormField('Name', form.name, 'name');
        if (!nameValidation.isValid) {
          newErrors.name = nameValidation.errors[0];
        }
        
        // Email validation
        const emailValidation = validateFormField('Email', form.email, 'email');
        if (!emailValidation.isValid) {
          newErrors.email = emailValidation.errors[0];
        }
        
        // Phone validation
        const phoneValidation = validateFormField('Phone', form.phone, 'phone');
        if (!phoneValidation.isValid) {
          newErrors.phone = phoneValidation.errors[0];
        }
        
        // Other required fields
        if (!form.city.trim()) newErrors.city = 'City is required';
        if (!form.occupation) newErrors.occupation = 'Occupation is required';
        if (!form.budget) newErrors.budget = 'Budget range is required';
        break;
      case 2:
        if (!form.currentSituation) newErrors.currentSituation = 'Please select your current situation';
        // Validate other current situation if "Other" is selected
        if (form.currentSituation === 'OTHER' && !form.otherCurrentSituation.trim()) {
          newErrors.otherCurrentSituation = 'Please specify your current housing situation';
        }
        break;
      case 3:
        if (form.mainProblems.length === 0) newErrors.mainProblems = 'Please select at least one problem';
        // Validate other main problem if "Other" is selected
        if (form.mainProblems.includes('OTHER') && !form.otherMainProblem.trim()) {
          newErrors.otherMainProblem = 'Please specify your other problem';
        }
        break;
      case 4:
        if (form.importantFeatures.length < 4) newErrors.importantFeatures = 'Please select at least 4 features';
        if (form.importantFeatures.length > 8) newErrors.importantFeatures = 'Please select maximum 8 features';
        // Validate other feature field if "Other" is selected
        if (form.importantFeatures.includes('OTHER') && !form.otherFeature.trim()) {
          newErrors.otherFeature = 'Please specify your other feature requirement';
        }
        break;
      case 5:
        if (!form.willingToPay) newErrors.willingToPay = 'Please select payment option';
        if (!form.urgency) newErrors.urgency = 'Please select urgency option';
        break;
      default:
        // No validation for unknown steps
        break;
    }
    
    return newErrors;
  };

  // Professional form submission with loading states
  const handleSubmit = async () => {
    if (!validateStep(5)) return;
    
    // Start loading
    setLoading(true);
    setSubmitStatus('');
    
    // Convert IDs to readable text for submission
    const formData = {
      ...form,
      city: form.city === 'OTHER' ? form.otherCity : getOptionText(form.city, 'city'),
      // Convert option IDs to readable text
      currentSituation: form.currentSituation ? getOptionText(form.currentSituation, 'currentSituation') : '',
      mainProblems: form.mainProblems.map(id => getOptionText(id, 'painPoints')),
      importantFeatures: form.importantFeatures.map(id => getOptionText(id, 'features')),
      // Add metadata
      language: lang,
      completionTime: Date.now() - form.formStartTime,
      submittedAt: new Date().toISOString()
    };

    try {
      const response = await fetch('https://feedbackform-aab9.onrender.com/api/user-feedback', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      
      if (response.ok) {
        // Mark as submitted before showing success
        markAsSubmitted(formData);
        
        setSubmitStatus('success');
        showNotification('success', 
          lang === 'hindi' ? 'рдлреАрдбрдмреИрдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕рдмрдорд┐рдЯ рд╣реЛ рдЧрдпрд╛! ЁЯОЙ' : 
          lang === 'hinglish' ? 'Feedback successfully submit ho gaya! ЁЯОЙ' :
          'Feedback successfully submitted! ЁЯОЙ'
        );
        
        // Redirect to thank you page after success
        setTimeout(() => {
          const params = new URLSearchParams({
            name: formData.name,
            type: 'user',
            lang: lang
          });
          window.location.href = `/thank-you?${params.toString()}`;
        }, 2000);
        
        // Reset form after success animation with delay (fallback)
        setTimeout(() => {
          setForm({
            name: '', email: '', phone: '', city: '', occupation: '', budget: '',
            currentSituation: '', otherCurrentSituation: '', mainProblems: [], otherMainProblem: '',
            importantFeatures: [], otherFeature: '', willingToPay: '',
            recommendation: 5, urgency: '', formStartTime: Date.now()
          });
          setCurrentStep(1);
          setSubmitStatus('');
          clearLocalStorage(); // Clear saved data after success
        }, 3000);
      } else {
        throw new Error('Network response was not ok');
      }
    } catch (error) {
      setSubmitStatus('error');
      showNotification('error', 
        lang === 'hindi' ? 'рдлреАрдбрдмреИрдХ рд╕рдмрдорд┐рдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред тЭМ' : 
        lang === 'hinglish' ? 'Feedback submit karne me error hui. Please try again. тЭМ' :
        'Error submitting feedback. Please try again. тЭМ'
      );
      console.error('Submission error:', error);
    } finally {
      setLoading(false);
    }
  };

  // Show notification system
  const showNotification = useCallback((type, message) => {
    setNotification({ show: true, type, message });
    setTimeout(() => {
      setNotification({ show: false, type: '', message: '' });
    }, 4000);
  }, []);

  // Data Persistence Functions
  const saveToLocalStorage = useCallback(() => {
    try {
      localStorage.setItem('userFeedbackForm', JSON.stringify(form));
      localStorage.setItem('userFeedbackStep', currentStep.toString());
      localStorage.setItem('userFeedbackLastSaved', new Date().toISOString());
    } catch (error) {
      console.error('Failed to save to localStorage:', error);
    }
  }, [form, currentStep]);



  const clearLocalStorage = () => {
    localStorage.removeItem('userFeedbackForm');
    localStorage.removeItem('userFeedbackStep');
    localStorage.removeItem('userFeedbackLastSaved');
  };

  // Load data on component mount
  useEffect(() => {
    // Check submission directly without function call
    try {
      const userSubmission = localStorage.getItem('userFeedbackSubmitted');
      if (userSubmission) {
        const submissionData = JSON.parse(userSubmission);
        const submissionTime = new Date(submissionData.timestamp);
        const now = new Date();
        const daysDiff = (now - submissionTime) / (1000 * 60 * 60 * 24);
        
        if (daysDiff < 30) {
          setAlreadySubmitted(true);
          setSubmissionInfo(submissionData);
          return;
        } else {
          localStorage.removeItem('userFeedbackSubmitted');
        }
      }
      
      // Load saved form data
      const savedForm = localStorage.getItem('userFeedbackForm');
      const savedStep = localStorage.getItem('userFeedbackStep');
      const lastSaved = localStorage.getItem('userFeedbackLastSaved');
      
      if (savedForm && savedStep && lastSaved) {
        const saveTime = new Date(lastSaved);
        const now = new Date();
        const hoursDiff = (now.getTime() - saveTime.getTime()) / (1000 * 3600);
        
        if (hoursDiff < 24) {
          setForm(JSON.parse(savedForm));
          setCurrentStep(parseInt(savedStep));
        }
      }
    } catch (error) {
      console.error('Error in initialization:', error);
    }
  }, []); // Run only once on mount

  // Auto-save on form changes (debounced)
  useEffect(() => {
    const timer = setTimeout(() => {
      if (form.name || form.email || form.phone) { // Only save if there's meaningful data
        try {
          localStorage.setItem('userFeedbackForm', JSON.stringify(form));
          localStorage.setItem('userFeedbackStep', currentStep.toString());
          localStorage.setItem('userFeedbackLastSaved', new Date().toISOString());
        } catch (error) {
          console.error('Failed to save to localStorage:', error);
        }
      }
    }, 1000); // 1 second debounce
    
    return () => clearTimeout(timer);
  }, [form, currentStep]); // Direct implementation, no function dependency

  // Advanced form change handler with real-time validation
  const handleChange = useCallback((field, value) => {
    let processedValue = value;
    let errorMessage = '';
    
    // Apply advanced input processing based on field type
    switch (field) {
      case 'name':
        processedValue = filterNameInput(value);
        const nameValidation = validateName(processedValue);
        if (!nameValidation.isValid && processedValue.length > 0) {
          errorMessage = nameValidation.error;
        }
        break;
        
      case 'phone':
        processedValue = getNormalizedMobile(value);
        const phoneError = getMobileValidationError(processedValue, false);
        if (phoneError && processedValue.length > 0) {
          errorMessage = phoneError;
        }
        break;
        
      case 'email':
        processedValue = value.trim().toLowerCase();
        const emailError = getEmailValidationError(processedValue, false);
        if (emailError && processedValue.length > 0) {
          errorMessage = emailError;
        }
        break;
        
      default:
        // processedValue is already set to value at initialization
        break;
    }
    
    // Update form value
    setForm(prev => ({ ...prev, [field]: processedValue }));
    
    // Update or clear error
    if (errorMessage) {
      setErrors(prev => ({ ...prev, [field]: errorMessage }));
    } else if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  }, [errors]);

  // Handle multiple selections
  const handleMultiSelect = useCallback((field, option) => {
    const current = form[field];
    const updated = current.includes(option) 
      ? current.filter(item => item !== option)
      : [...current, option];
    
    handleChange(field, updated);
  }, [form, handleChange]);

  // Progress calculation
  const progress = (currentStep / 5) * 100;

  // If already submitted, redirect to thank you page
  if (alreadySubmitted && submissionInfo) {
    const params = new URLSearchParams({
      name: submissionInfo.name,
      type: 'user',
      lang: lang
    });
    window.location.href = `/thank-you?${params.toString()}`;
    return null;
  }

  return (
    <>
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        fontFamily: 'Inter, system-ui, sans-serif',
        padding: '20px 0'
      }}>
      {/* Language Selector */}
      <div style={{
        position: 'fixed',
        top: '20px',
        right: '20px',
        display: 'flex',
        gap: '8px',
        zIndex: 1000
      }}>
        {['english', 'hindi', 'hinglish'].map(language => (
          <button
            key={language}
            onClick={() => handleLanguageChange(language)}
            style={{
              padding: '8px 16px',
              borderRadius: '25px',
              border: 'none',
              background: lang === language ? '#fff' : 'rgba(255,255,255,0.2)',
              color: lang === language ? '#667eea' : '#fff',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '500',
              backdropFilter: 'blur(10px)',
              transition: 'all 0.3s ease'
            }}
          >
            {language === 'english' ? 'EN' : language === 'hindi' ? 'рд╣рд┐рдВ' : 'HI'}
          </button>
        ))}
      </div>

      {/* Main Container */}
      <div style={{
        maxWidth: '600px',
        margin: '0 auto',
        background: 'rgba(255, 255, 255, 0.95)',
        backdropFilter: 'blur(20px)',
        borderRadius: '24px',
        boxShadow: '0 20px 40px rgba(0,0,0,0.1)',
        overflow: 'hidden'
      }}>
        {/* Header */}
        <div style={{
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          padding: '32px',
          textAlign: 'center',
          color: '#fff'
        }}>
          <h1 style={{
            fontSize: '28px',
            fontWeight: '700',
            margin: '0 0 8px 0',
            letterSpacing: '-0.5px'
          }}>
            {currentLang.title}
          </h1>
          <p style={{
            fontSize: '16px',
            opacity: 0.9,
            margin: 0,
            fontWeight: '400'
          }}>
            {currentLang.subtitle}
          </p>
        </div>

        {/* Progress Bar */}
        <div style={{
          background: '#f8faff',
          padding: '0'
        }}>
          <div style={{
            height: '4px',
            background: `linear-gradient(to right, #667eea ${progress}%, #e2e8f0 ${progress}%)`,
            transition: 'all 0.3s ease'
          }} />
          
          {/* Step Indicators */}
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            padding: '20px 32px',
            background: '#f8faff'
          }}>
            {currentLang.steps.map((step, index) => (
              <div 
                key={index}
                style={{
                  textAlign: 'center',
                  opacity: index + 1 <= currentStep ? 1 : 0.4,
                  transition: 'all 0.3s ease'
                }}
              >
                <div style={{
                  width: '32px',
                  height: '32px',
                  borderRadius: '50%',
                  background: index + 1 <= currentStep ? '#667eea' : '#e2e8f0',
                  color: '#fff',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '14px',
                  fontWeight: 'bold',
                  margin: '0 auto 8px'
                }}>
                  {index + 1}
                </div>
                <div style={{
                  fontSize: '12px',
                  fontWeight: '500',
                  color: '#64748b',
                  maxWidth: '80px'
                }}>
                  {step}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Form Content */}
        <div style={{ 
          padding: window.innerWidth <= 768 ? '16px' : '32px'
        }}>
          
          {/* Step 1: Profile */}
          {currentStep === 1 && (
            <div>
              <div style={{ marginBottom: window.innerWidth <= 768 ? '20px' : '32px' }}>
                <h2 style={{
                  fontSize: window.innerWidth <= 768 ? '20px' : '24px',
                  fontWeight: '600',
                  margin: '0 0 8px 0',
                  color: '#1e293b'
                }}>
                  {currentLang.profile.title}
                </h2>
                <p style={{
                  fontSize: '16px',
                  color: '#64748b',
                  margin: 0
                }}>
                  {currentLang.profile.subtitle}
                </p>
              </div>

              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: window.innerWidth > 768 ? '1fr 1.5fr' : '1fr', 
                gap: '20px' 
              }}>
                <div>
                  <label style={{ 
                    display: 'block',
                    fontSize: '14px',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '8px',
                    textAlign: 'left'
                  }}>
                    {currentLang.profile.name}
                  </label>
                  <input
                    type="text"
                    value={form.name}
                    onChange={(e) => handleChange('name', e.target.value)}
                    style={{
                      width: '100%',
                      padding: window.innerWidth <= 768 ? '16px 20px' : '12px 16px',
                      border: errors.name ? '2px solid #ef4444' : '1px solid #d1d5db',
                      borderRadius: window.innerWidth <= 768 ? '12px' : '8px',
                      fontSize: '16px',
                      outline: 'none',
                      transition: 'border-color 0.2s',
                      background: '#fff',
                      boxSizing: 'border-box',
                      height: window.innerWidth <= 768 ? '52px' : '48px'
                    }}
                    placeholder="Enter your full name"
                  />
                  {errors.name && (
                    <div style={{ color: '#ef4444', fontSize: '12px', marginTop: '4px' }}>
                      {errors.name}
                    </div>
                  )}
                </div>

                <div>
                  <label style={{ 
                    display: 'block',
                    fontSize: '14px',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '8px',
                    textAlign: 'left'
                  }}>
                    {currentLang.profile.email}
                  </label>
                  <input
                    type="email"
                    value={form.email}
                    onChange={(e) => handleChange('email', e.target.value)}
                    style={{
                      width: '100%',
                      padding: window.innerWidth <= 768 ? '16px 20px' : '12px 16px',
                      border: errors.email ? '2px solid #ef4444' : '1px solid #d1d5db',
                      borderRadius: window.innerWidth <= 768 ? '12px' : '8px',
                      fontSize: '16px',
                      outline: 'none',
                      transition: 'border-color 0.2s',
                      background: '#fff',
                      boxSizing: 'border-box',
                      height: window.innerWidth <= 768 ? '52px' : '48px'
                    }}
                    placeholder="Enter your email address"
                  />
                  {errors.email && (
                    <div style={{ color: '#ef4444', fontSize: '12px', marginTop: '4px' }}>
                      {errors.email}
                    </div>
                  )}
                </div>

                <div style={{ display: 'grid', gridTemplateColumns: '1fr', gap: '16px' }}>
                  
                  <div>
                    <label style={{ 
                      display: 'block',
                      fontSize: '14px',
                      fontWeight: '500',
                      color: '#374151',
                      marginBottom: '8px',
                      textAlign: 'left'
                    }}>
                      {currentLang.profile.city}
                    </label>
                    <input
                      type="text"
                      value={form.city}
                      onChange={(e) => handleChange('city', e.target.value)}
                      style={{
                        width: '100%',
                        padding: window.innerWidth <= 768 ? '16px 20px' : '12px 16px',
                        border: errors.city ? '2px solid #ef4444' : '1px solid #d1d5db',
                        borderRadius: window.innerWidth <= 768 ? '12px' : '8px',
                        fontSize: '16px',
                        outline: 'none',
                        transition: 'border-color 0.2s',
                        background: '#fff',
                        boxSizing: 'border-box',
                        height: window.innerWidth <= 768 ? '52px' : '48px'
                      }}
                      placeholder="Enter your current city"
                    />
                    {errors.city && (
                      <div style={{ color: '#ef4444', fontSize: '12px', marginTop: '4px' }}>
                        {errors.city}
                      </div>
                    )}
                  </div>
                </div>

                <div>
                  <label style={{ 
                    display: 'block',
                    fontSize: '14px',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '8px',
                    textAlign: 'left'
                  }}>
                    {currentLang.profile.phone}
                  </label>
                  <input
                    type="tel"
                    value={form.phone}
                    onChange={(e) => handleChange('phone', e.target.value)}
                    style={{
                      width: '100%',
                      padding: window.innerWidth <= 768 ? '16px 20px' : '12px 16px',
                      border: errors.phone ? '2px solid #ef4444' : '1px solid #d1d5db',
                      borderRadius: window.innerWidth <= 768 ? '12px' : '8px',
                      fontSize: '16px',
                      outline: 'none',
                      transition: 'border-color 0.2s',
                      background: '#fff',
                      boxSizing: 'border-box',
                      height: window.innerWidth <= 768 ? '52px' : '48px'
                    }}
                    placeholder="Phone"
                  />
                  {errors.phone && (
                    <div style={{ color: '#ef4444', fontSize: '12px', marginTop: '4px' }}>
                      {errors.phone}
                    </div>
                  )}
                </div>

                <div>
                  <label style={{ 
                    display: 'block',
                    fontSize: '14px',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '8px',
                    textAlign: 'left'
                  }}>
                    {currentLang.profile.occupation}
                  </label>
                  <select
                    value={form.occupation}
                    onChange={(e) => handleChange('occupation', e.target.value)}
                    style={{
                      width: '100%',
                      padding: window.innerWidth <= 768 ? '16px 20px' : '12px 16px',
                      border: errors.occupation ? '2px solid #ef4444' : '1px solid #d1d5db',
                      borderRadius: window.innerWidth <= 768 ? '12px' : '8px',
                      fontSize: '16px',
                      outline: 'none',
                      transition: 'all 0.3s ease',
                      background: '#fff',
                      cursor: 'pointer',
                      boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
                      backgroundImage: 'url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'none\' viewBox=\'0 0 20 20\'%3e%3cpath stroke=\'%236B7280\' stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'1.5\' d=\'M6 8l4 4 4-4\'%3e%3c/path%3e%3c/svg%3e")',
                      backgroundPosition: window.innerWidth <= 768 ? 'right 16px center' : 'right 12px center',
                      backgroundRepeat: 'no-repeat',
                      backgroundSize: '16px',
                      paddingRight: window.innerWidth <= 768 ? '48px' : '40px',
                      appearance: 'none',
                      boxSizing: 'border-box',
                      height: window.innerWidth <= 768 ? '52px' : '48px'
                    }}
                  >
                    {currentLang.profile.occupationOptions.map((option, index) => (
                      <option key={index} value={index === 0 ? '' : option}>
                        {option}
                      </option>
                    ))}
                  </select>
                  {errors.occupation && (
                    <div style={{ color: '#ef4444', fontSize: '12px', marginTop: '4px' }}>
                      {errors.occupation}
                    </div>
                  )}
                </div>

                <div>
                  <label style={{ 
                    display: 'block',
                    fontSize: '14px',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '8px',
                    textAlign: 'left'
                  }}>
                    {currentLang.profile.budget}
                  </label>
                  <select
                    value={form.budget}
                    onChange={(e) => handleChange('budget', e.target.value)}
                    style={{
                      width: '100%',
                      padding: window.innerWidth <= 768 ? '16px 20px' : '12px 16px',
                      border: errors.budget ? '2px solid #ef4444' : '1px solid #d1d5db',
                      borderRadius: window.innerWidth <= 768 ? '12px' : '8px',
                      fontSize: '16px',
                      outline: 'none',
                      transition: 'all 0.3s ease',
                      background: '#fff',
                      cursor: 'pointer',
                      boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
                      backgroundImage: 'url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'none\' viewBox=\'0 0 20 20\'%3e%3cpath stroke=\'%236B7280\' stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'1.5\' d=\'M6 8l4 4 4-4\'%3e%3c/path%3e%3c/svg%3e")',
                      backgroundPosition: window.innerWidth <= 768 ? 'right 16px center' : 'right 12px center',
                      backgroundRepeat: 'no-repeat',
                      backgroundSize: '16px',
                      paddingRight: window.innerWidth <= 768 ? '48px' : '40px',
                      appearance: 'none',
                      boxSizing: 'border-box',
                      height: window.innerWidth <= 768 ? '52px' : '48px'
                    }}
                  >
                    {currentLang.profile.budgetOptions.map((option, index) => (
                      <option key={index} value={index === 0 ? '' : option}>
                        {option}
                      </option>
                    ))}
                  </select>
                  {errors.budget && (
                    <div style={{ color: '#ef4444', fontSize: '12px', marginTop: '4px' }}>
                      {errors.budget}
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Step 2: Current Situation */}
          {currentStep === 2 && (
            <div>
              <div style={{ marginBottom: '32px' }}>
                <h2 style={{
                  fontSize: '24px',
                  fontWeight: '600',
                  margin: '0 0 8px 0',
                  color: '#1e293b'
                }}>
                  {currentLang.currentSituation.title}
                </h2>
                <p style={{
                  fontSize: '16px',
                  color: '#64748b',
                  margin: 0
                }}>
                  {currentLang.currentSituation.subtitle}
                </p>
              </div>

              <div style={{ display: 'grid', gap: '12px' }}>
                {getOptionsList('currentSituation').map((option, index) => (
                  <label 
                    key={option.id}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      padding: '16px',
                      border: form.currentSituation === option.id ? '2px solid #667eea' : '1px solid #e2e8f0',
                      borderRadius: '12px',
                      cursor: 'pointer',
                      transition: 'all 0.2s ease',
                      background: form.currentSituation === option.id ? '#f0f4ff' : '#fff'
                    }}
                  >
                    <input
                      type="radio"
                      name="currentSituation"
                      value={option.id}
                      checked={form.currentSituation === option.id}
                      onChange={(e) => handleChange('currentSituation', e.target.value)}
                      style={{ marginRight: '12px' }}
                    />
                    <span style={{
                      fontSize: '16px',
                      fontWeight: '500',
                      color: '#374151'
                    }}>
                      {option.text}
                    </span>
                  </label>
                ))}
              </div>

              {/* Other Current Situation Input */}
              {form.currentSituation === 'OTHER' && (
                <div style={{ marginTop: '20px' }}>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: '#374151'
                  }}>
                    {
                      lang === 'hindi' ? 'рдЕрдкрдиреА рд╡рд░реНрддрдорд╛рди рд╕реНрдерд┐рддрд┐ рдмрддрд╛рдПрдВ:' :
                      lang === 'hinglish' ? 'Apni current situation bataye:' :
                      'Please specify your current housing situation:'
                    }
                  </label>
                  <textarea
                    value={form.otherCurrentSituation}
                    onChange={(e) => handleChange('otherCurrentSituation', e.target.value)}
                    placeholder={
                      lang === 'hindi' ? 'рдЕрдкрдиреА рд╡рд░реНрддрдорд╛рди рд╣рд╛рдЙрд╕рд┐рдВрдЧ рд╕реНрдерд┐рддрд┐ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ...' :
                      lang === 'hinglish' ? 'Apni current housing situation ke baare me bataye...' :
                      'Describe your current housing situation...'
                    }
                    style={{
                      width: '70%',
                      maxWidth: '500px',
                      margin: '0 auto',
                      display: 'block',
                      padding: '12px 16px',
                      borderRadius: '8px',
                      border: errors.otherCurrentSituation ? '2px solid #ef4444' : '1px solid #d1d5db',
                      fontSize: '16px',
                      minHeight: '80px',
                      resize: 'vertical',
                      fontFamily: 'inherit'
                    }}
                  />
                  {errors.otherCurrentSituation && (
                    <div style={{ color: '#ef4444', fontSize: '14px', marginTop: '4px' }}>
                      {errors.otherCurrentSituation}
                    </div>
                  )}
                </div>
              )}
              
              {errors.currentSituation && (
                <div style={{ color: '#ef4444', fontSize: '14px', marginTop: '16px', textAlign: 'center' }}>
                  {errors.currentSituation}
                </div>
              )}
            </div>
          )}

          {/* Step 3: Pain Points */}
          {currentStep === 3 && (
            <div>
              <div style={{ marginBottom: '32px' }}>
                <h2 style={{
                  fontSize: '24px',
                  fontWeight: '600',
                  margin: '0 0 8px 0',
                  color: '#1e293b'
                }}>
                  {currentLang.painPoints.title}
                </h2>
                <p style={{
                  fontSize: '16px',
                  color: '#64748b',
                  margin: 0
                }}>
                  {currentLang.painPoints.subtitle}
                </p>
              </div>

              <div style={{ display: 'grid', gap: '12px' }}>
                {getOptionsList('painPoints').map((option, index) => (
                  <label 
                    key={option.id}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      padding: window.innerWidth <= 768 ? '20px 24px' : '16px',
                      border: form.mainProblems.includes(option.id) ? '2px solid #667eea' : '1px solid #e2e8f0',
                      borderRadius: window.innerWidth <= 768 ? '16px' : '12px',
                      cursor: 'pointer',
                      transition: 'all 0.2s ease',
                      background: form.mainProblems.includes(option.id) ? '#f0f4ff' : '#fff',
                      minHeight: window.innerWidth <= 768 ? '56px' : '48px'
                    }}
                  >
                    <input
                      type="checkbox"
                      checked={form.mainProblems.includes(option.id)}
                      onChange={() => handleMultiSelect('mainProblems', option.id)}
                      style={{ 
                        marginRight: window.innerWidth <= 768 ? '16px' : '12px',
                        transform: window.innerWidth <= 768 ? 'scale(1.3)' : 'scale(1)'
                      }}
                    />
                    <span style={{
                      fontSize: window.innerWidth <= 768 ? '18px' : '16px',
                      fontWeight: '500',
                      color: '#374151'
                    }}>
                      {option.text}
                    </span>
                  </label>
                ))}
              </div>

              {/* Other Main Problem Input */}
              {form.mainProblems.includes('OTHER') && (
                <div style={{ marginTop: '20px' }}>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: '#374151'
                  }}>
                    {
                      lang === 'hindi' ? 'рдЕрдиреНрдп рд╕рдорд╕реНрдпрд╛ рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрдВ:' :
                      lang === 'hinglish' ? 'Other problem ki details bataye:' :
                      'Please specify your other problem:'
                    }
                  </label>
                  <textarea
                    value={form.otherMainProblem}
                    onChange={(e) => handleChange('otherMainProblem', e.target.value)}
                    placeholder={
                      lang === 'hindi' ? 'рдЖрдкрдХреА рдЕрдиреНрдп рд╕рдорд╕реНрдпрд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ...' :
                      lang === 'hinglish' ? 'Aapki other problem ke baare me bataye...' :
                      'Describe your other problem while searching for rooms...'
                    }
                    style={{
                      width: '70%',
                      maxWidth: '500px',
                      margin: '0 auto',
                      display: 'block',
                      padding: '12px 16px',
                      borderRadius: '8px',
                      border: errors.otherMainProblem ? '2px solid #ef4444' : '1px solid #d1d5db',
                      fontSize: '16px',
                      minHeight: '80px',
                      resize: 'vertical',
                      fontFamily: 'inherit'
                    }}
                  />
                  {errors.otherMainProblem && (
                    <div style={{ color: '#ef4444', fontSize: '14px', marginTop: '4px' }}>
                      {errors.otherMainProblem}
                    </div>
                  )}
                </div>
              )}
              
              {errors.mainProblems && (
                <div style={{ color: '#ef4444', fontSize: '14px', marginTop: '16px', textAlign: 'center' }}>
                  {errors.mainProblems}
                </div>
              )}
            </div>
          )}

          {/* Step 4: Features */}
          {currentStep === 4 && (
            <div>
              <div style={{ marginBottom: '32px' }}>
                <h2 style={{
                  fontSize: '24px',
                  fontWeight: '600',
                  margin: '0 0 8px 0',
                  color: '#1e293b'
                }}>
                  {currentLang.features.title}
                </h2>
                <p style={{
                  fontSize: '16px',
                  color: '#64748b',
                  margin: 0
                }}>
                  {currentLang.features.subtitle}
                </p>
              </div>

              <div style={{ display: 'grid', gap: '12px' }}>
                {getOptionsList('features').map((option, index) => (
                  <label 
                    key={option.id}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      padding: '16px',
                      border: form.importantFeatures.includes(option.id) ? '2px solid #667eea' : '1px solid #e2e8f0',
                      borderRadius: '12px',
                      cursor: 'pointer',
                      transition: 'all 0.2s ease',
                      background: form.importantFeatures.includes(option.id) ? '#f0f4ff' : '#fff',
                      opacity: form.importantFeatures.length >= 8 && !form.importantFeatures.includes(option.id) ? 0.5 : 1
                    }}
                  >
                    <input
                      type="checkbox"
                      checked={form.importantFeatures.includes(option.id)}
                      onChange={() => handleMultiSelect('importantFeatures', option.id)}
                      disabled={form.importantFeatures.length >= 8 && !form.importantFeatures.includes(option.id)}
                      style={{ marginRight: '12px' }}
                    />
                    <span style={{
                      fontSize: '16px',
                      fontWeight: '500',
                      color: '#374151'
                    }}>
                      {option.text}
                    </span>
                  </label>
                ))}
              </div>
              
              {/* Other Feature Input */}
              {form.importantFeatures.includes('OTHER') && (
                <div style={{ marginTop: '20px' }}>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: '#374151'
                  }}>
                    {
                      lang === 'hindi' ? 'рдЕрдиреНрдп рдлреАрдЪрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрдВ:' :
                      lang === 'hinglish' ? 'Other feature ki details bataye:' :
                      'Please specify your other feature requirement:'
                    }
                  </label>
                  <textarea
                    value={form.otherFeature}
                    onChange={(e) => handleChange('otherFeature', e.target.value)}
                    placeholder={
                      lang === 'hindi' ? 'рдпрд╣рд╛рдБ рдЕрдкрдиреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд▓рд┐рдЦреЗрдВ...' :
                      lang === 'hinglish' ? 'Yaha apni requirement likhiye...' :
                      'Write your specific feature requirement here...'
                    }
                    style={{
                      width: '70%',
                      maxWidth: '500px',
                      margin: '0 auto',
                      display: 'block',
                      padding: '12px 16px',
                      borderRadius: '8px',
                      border: errors.otherFeature ? '2px solid #ef4444' : '1px solid #d1d5db',
                      fontSize: '16px',
                      minHeight: '80px',
                      resize: 'vertical',
                      fontFamily: 'inherit'
                    }}
                  />
                  {errors.otherFeature && (
                    <div style={{ color: '#ef4444', fontSize: '14px', marginTop: '4px' }}>
                      {errors.otherFeature}
                    </div>
                  )}
                </div>
              )}

              <div style={{
                textAlign: 'center',
                marginTop: '16px',
                fontSize: '14px',
                color: '#64748b'
              }}>
                Selected: {form.importantFeatures.length}/8 (Min: 4, Max: 8)
              </div>
              
              {errors.importantFeatures && (
                <div style={{ color: '#ef4444', fontSize: '14px', marginTop: '8px', textAlign: 'center' }}>
                  {errors.importantFeatures}
                </div>
              )}
            </div>
          )}

          {/* Step 5: Success */}
          {currentStep === 5 && (
            <div>
              <div style={{ marginBottom: '32px' }}>
                <h2 style={{
                  fontSize: '24px',
                  fontWeight: '600',
                  margin: '0 0 8px 0',
                  color: '#1e293b'
                }}>
                  {currentLang.success.title}
                </h2>
                <p style={{
                  fontSize: '16px',
                  color: '#64748b',
                  margin: 0
                }}>
                  {currentLang.success.subtitle}
                </p>
              </div>

              <div style={{ display: 'grid', gap: '24px' }}>
                {/* Willing to Pay */}
                <div>
                  <label style={{ 
                    display: 'block',
                    fontSize: '16px',
                    fontWeight: '600',
                    color: '#374151',
                    marginBottom: '12px',
                    textAlign: 'left'
                  }}>
                    {currentLang.success.willingToPay}
                  </label>
                  <div style={{ display: 'grid', gap: '8px' }}>
                    {currentLang.success.paymentOptions.map((option, index) => (
                      <label 
                        key={index}
                        style={{
                          display: 'flex',
                          alignItems: 'center',
                          padding: window.innerWidth <= 768 ? '18px 20px' : '12px',
                          border: form.willingToPay === option ? '2px solid #667eea' : '1px solid #e2e8f0',
                          borderRadius: window.innerWidth <= 768 ? '12px' : '8px',
                          cursor: 'pointer',
                          transition: 'all 0.2s ease',
                          background: form.willingToPay === option ? '#f0f4ff' : '#fff',
                          minHeight: window.innerWidth <= 768 ? '52px' : '44px'
                        }}
                      >
                        <input
                          type="radio"
                          name="willingToPay"
                          value={option}
                          checked={form.willingToPay === option}
                          onChange={(e) => handleChange('willingToPay', e.target.value)}
                          style={{ 
                            marginRight: window.innerWidth <= 768 ? '12px' : '8px',
                            transform: window.innerWidth <= 768 ? 'scale(1.2)' : 'scale(1)'
                          }}
                        />
                        <span style={{ 
                          fontSize: window.innerWidth <= 768 ? '16px' : '14px', 
                          color: '#374151' 
                        }}>
                          {option}
                        </span>
                      </label>
                    ))}
                  </div>
                  {errors.willingToPay && (
                    <div style={{ color: '#ef4444', fontSize: '12px', marginTop: '4px' }}>
                      {errors.willingToPay}
                    </div>
                  )}
                </div>

                {/* Recommendation Scale */}
                <div>
                  <label style={{ 
                    display: 'block',
                    fontSize: '14px',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '12px',
                    textAlign: 'left'
                  }}>
                    {currentLang.success.recommendation}
                  </label>
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '12px'
                  }}>
                    <span style={{ fontSize: '12px', color: '#64748b' }}>1</span>
                    <input
                      type="range"
                      min="1"
                      max="10"
                      value={form.recommendation}
                      onChange={(e) => handleChange('recommendation', parseInt(e.target.value))}
                      style={{ flex: 1 }}
                    />
                    <span style={{ fontSize: '12px', color: '#64748b' }}>10</span>
                    <div style={{
                      background: '#667eea',
                      color: '#fff',
                      padding: '4px 12px',
                      borderRadius: '20px',
                      fontSize: '14px',
                      fontWeight: '600',
                      minWidth: '40px',
                      textAlign: 'center'
                    }}>
                      {form.recommendation}
                    </div>
                  </div>
                </div>

                {/* Urgency */}
                <div>
                  <label style={{ 
                    display: 'block',
                    fontSize: '16px',
                    fontWeight: '600',
                    color: '#374151',
                    marginBottom: '12px',
                    textAlign: 'left'
                  }}>
                    {currentLang.success.urgency}
                  </label>
                  <div style={{ display: 'grid', gap: '8px' }}>
                    {currentLang.success.urgencyOptions.map((option, index) => (
                      <label 
                        key={index}
                        style={{
                          display: 'flex',
                          alignItems: 'center',
                          padding: '12px',
                          border: form.urgency === option ? '2px solid #667eea' : '1px solid #e2e8f0',
                          borderRadius: '8px',
                          cursor: 'pointer',
                          transition: 'all 0.2s ease',
                          background: form.urgency === option ? '#f0f4ff' : '#fff'
                        }}
                      >
                        <input
                          type="radio"
                          name="urgency"
                          value={option}
                          checked={form.urgency === option}
                          onChange={(e) => handleChange('urgency', e.target.value)}
                          style={{ marginRight: '8px' }}
                        />
                        <span style={{ fontSize: '14px', color: '#374151' }}>
                          {option}
                        </span>
                      </label>
                    ))}
                  </div>
                  {errors.urgency && (
                    <div style={{ color: '#ef4444', fontSize: '12px', marginTop: '4px' }}>
                      {errors.urgency}
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

        </div>

        {/* Navigation */}
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          padding: '24px 32px',
          borderTop: '1px solid #e2e8f0',
          background: '#f8faff'
        }}>
          <button
            onClick={() => {
              if (currentStep > 1) {
                setCurrentStep(currentStep - 1);
                setErrors({});
              }
            }}
            style={{
              padding: window.innerWidth <= 768 ? '16px 32px' : '12px 24px',
              border: '1px solid #d1d5db',
              borderRadius: window.innerWidth <= 768 ? '12px' : '8px',
              background: '#fff',
              color: '#374151',
              cursor: currentStep > 1 ? 'pointer' : 'not-allowed',
              fontSize: window.innerWidth <= 768 ? '18px' : '16px',
              fontWeight: '500',
              opacity: currentStep > 1 ? 1 : 0.5,
              transition: 'all 0.2s ease',
              minHeight: window.innerWidth <= 768 ? '48px' : '40px'
            }}
            disabled={currentStep === 1}
          >
            {currentLang.navigation.prev}
          </button>

          <button
            onClick={async () => {
              if (currentStep === 5) {
                handleSubmit();
              } else if (validateStep(currentStep)) {
                setStepLoading(true);
                // Smooth transition with loading
                setTimeout(() => {
                  setCurrentStep(currentStep + 1);
                  setErrors({});
                  setStepLoading(false);
                  saveToLocalStorage(); // Save progress
                }, 300);
              }
            }}
            disabled={loading || stepLoading || !validateStep(currentStep)}
            style={{
              padding: window.innerWidth <= 768 ? '16px 32px' : '12px 24px',
              border: 'none',
              borderRadius: window.innerWidth <= 768 ? '12px' : '8px',
              background: (loading || stepLoading || !validateStep(currentStep)) 
                ? '#ccc' 
                : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: '#fff',
              cursor: (loading || stepLoading || !validateStep(currentStep)) ? 'not-allowed' : 'pointer',
              fontSize: window.innerWidth <= 768 ? '18px' : '16px',
              fontWeight: '600',
              transition: 'all 0.2s ease',
              boxShadow: (loading || stepLoading || !validateStep(currentStep)) 
                ? 'none' 
                : '0 4px 12px rgba(102, 126, 234, 0.3)',
              opacity: (loading || stepLoading || !validateStep(currentStep)) ? 0.6 : 1,
              minHeight: window.innerWidth <= 768 ? '48px' : '40px'
            }}
          >
            {loading ? (
              <>
                <span style={{ marginRight: '8px' }}>тП│</span>
                {lang === 'hindi' ? 'рд╕рдмрдорд┐рдЯ рд╣реЛ рд░рд╣рд╛ рд╣реИ...' : 
                 lang === 'hinglish' ? 'Submit ho raha hai...' : 
                 'Submitting...'}
              </>
            ) : stepLoading ? (
              <>
                <span style={{ marginRight: '8px' }}>тП│</span>
                {lang === 'hindi' ? 'рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...' : 
                 lang === 'hinglish' ? 'Load ho raha hai...' : 
                 'Loading...'}
              </>
            ) : (
              currentStep === 5 ? currentLang.navigation.submit : currentLang.navigation.next
            )}
          </button>
        </div>
      </div>

      {/* Professional Notification System */}
      {notification.show && (
        <div style={{
          position: 'fixed',
          top: '20px',
          right: '20px',
          background: notification.type === 'success' ? 
            'linear-gradient(135deg, #48bb78 0%, #38a169 100%)' : 
            'linear-gradient(135deg, #f56565 0%, #e53e3e 100%)',
          color: 'white',
          padding: '16px 24px',
          borderRadius: '12px',
          boxShadow: '0 10px 25px rgba(0,0,0,0.2)',
          zIndex: 10000,
          fontSize: '16px',
          fontWeight: '500',
          maxWidth: '350px',
          animation: 'slideInRight 0.3s ease-out forwards',
          backdropFilter: 'blur(10px)'
        }}>
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: '10px' 
          }}>
            <span style={{ fontSize: '20px' }}>
              {notification.type === 'success' ? 'тЬЕ' : 'тЭМ'}
            </span>
            <span>{notification.message}</span>
          </div>
        </div>
      )}

      {/* Success/Error Overlay */}
      {submitStatus && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 9999,
          backdropFilter: 'blur(5px)'
        }}>
          <div style={{
            background: 'white',
            padding: '40px',
            borderRadius: '20px',
            textAlign: 'center',
            boxShadow: '0 20px 40px rgba(0,0,0,0.1)',
            maxWidth: '400px',
            width: '90%'
          }}>
            {submitStatus === 'success' ? (
              <>
                <div style={{ fontSize: '60px', marginBottom: '20px' }}>ЁЯОЙ</div>
                <h2 style={{ color: '#48bb78', marginBottom: '16px' }}>
                  {lang === 'hindi' ? 'рд╕рдлрд▓рддрд╛!' : 'Success!'}
                </h2>
                <p style={{ color: '#666' }}>
                  {lang === 'hindi' ? 'рдЖрдкрдХрд╛ рдлреАрдбрдмреИрдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕рдмрдорд┐рдЯ рд╣реЛ рдЧрдпрд╛ рд╣реИред' : 
                   lang === 'hinglish' ? 'Aapka feedback successfully submit ho gaya hai.' : 
                   'Your feedback has been successfully submitted.'}
                </p>
              </>
            ) : (
              <>
                <div style={{ fontSize: '60px', marginBottom: '20px' }}>тЭМ</div>
                <h2 style={{ color: '#f56565', marginBottom: '16px' }}>
                  {lang === 'hindi' ? 'рддреНрд░реБрдЯрд┐!' : 'Error!'}
                </h2>
                <p style={{ color: '#666' }}>
                  {lang === 'hindi' ? 'рдХреБрдЫ рдЧрд▓рдд рд╣реБрдЖ рд╣реИред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред' : 
                   lang === 'hinglish' ? 'Kuch galat hua hai. Please try again.' : 
                   'Something went wrong. Please try again.'}
                </p>
              </>
            )}
          </div>
        </div>
      )}
    </div>

    <style>{`
      @keyframes slideInRight {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }
      
      @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
      }
      
      @keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
      }
    `}</style>
    </>
  );
};

export default AdvancedUserFeedbackForm;